#!/usr/bin/php
<?php
######################################################
# SETTINGS

$HOSTS_FILE = "/etc/hosts";

$HOSTS_FILE_BACKUP = "/etc/hosts.backup";

$IP_ADDR_REGEXP = "[0-9]+\\.[0-9]+\\.[0-9]+\\.[0-9]+";

######################################################

// make initial backup if not exists
if (!file_exists($HOSTS_FILE_BACKUP)) {
    file_put_contents($HOSTS_FILE_BACKUP,
        file_get_contents($HOSTS_FILE));
}

define("DEFAULT_GROUP_NAME", "__default");

$group = DEFAULT_GROUP_NAME;
$groups = array($group => array());
$rows = file($HOSTS_FILE);

foreach ($rows as $rowNr => &$row) {
    $row = trim($row);

    if (!strlen($row)) {
        unset($rows[$rowNr]);
        continue;
    }

    if ($row[0] == "#" && !preg_match("/[ ]?" . $IP_ADDR_REGEXP . "/", $row)) {
        $group = trim(str_replace("#", "", $row));
        $groups[$group] = array();
    } else {
        $groups[$group][] = $row;
    }
}

$hosts = array();
foreach ($groups as $groupName => $groupHostsArr) {
    $hosts[$groupName] = array();
    foreach ($groupHostsArr as $groupHosts) {
        $off = false;
        $ip = "unknown";
        foreach (preg_split("/[\s]+/", $groupHosts) as $part) {
            if ($part == "#") {
                $off = true;
                continue;
            }

            if ($part[0] == "#") {
                $off = true;
            }

            $part = trim(str_replace("#", "", $part));
            if (preg_match("/" . $IP_ADDR_REGEXP . "/", $part)) {
                $ip = $part;
            } else {
                $hosts[$groupName][$part] = $ip . ":" . ($off? 'off':'on');
            }
        }
    }
}

function setHostState($hostStr, $state)
{
    $parts = explode(":", $hostStr);
    return $parts[0] . ":" . $state;
}

function printFile(array $hosts)
{
    $content = "";
    foreach ($hosts as $groupName => $groupHosts) {
        ksort($groupHosts);
        $content .= "#" . $groupName . "\n";
        foreach ($groupHosts as $groupHost => $hostStr) {
            $parts = explode(":", $hostStr);

            if ($parts[1] == "off") {
                $content .= "#";
            }

            $content .= $parts[0] . "\t" . $groupHost . "\n";
        }
        $content .= "\n";
    }
    return $content;
}

if ($argc >= 3 && $argc <= 5) {

    if ($argv[1] == "-l") {
        // print content of chosen host/group
        if (isset($hosts[$argv[2]])) {
            // list group
            $maxHostNameLength = 0;
            foreach ($hosts[$argv[2]] as $hostName => $hostStr) {
                if (strlen($hostName) > $maxHostNameLength)
                    $maxHostNameLength = strlen($hostName);
            }

            echo "\n" . str_pad("host", $maxHostNameLength, ' ') . "\t" . str_pad("ip", 15, ' ') . "\tstate\n";
            echo str_repeat("-", $maxHostNameLength) . "\t" . str_repeat("-", 15) . "\t-----\n";
            foreach ($hosts[$argv[2]] as $hostName => $hostStr) {
                $hostParts = explode(":", $hostStr);
                echo "\033[0;37m" . str_pad($hostName, $maxHostNameLength, ' ') . "\t" . str_pad($hostParts[0], 15, ' ');
                echo "\t[\033[0;" . (($hostParts[1] == "on")? "32":"31") . "m" . strtoupper($hostParts[1]) . "\033[0;37m]\n";
            }

            echo "\n";
        } else {
            // list host
            $maxGroupNameLength = 0;
            foreach ($hosts as $group => $groupHosts) {
                foreach ($groupHosts as $hostName => $hostStr) {
                    if ($hostName == $argv[2]) {
                        if (strlen($group) > $maxGroupNameLength)
                            $maxGroupNameLength = strlen($group);
                    }
                }
            }

            echo "\n" . str_pad("host", $maxGroupNameLength, ' ') . "\t" . str_pad("ip", 15, ' ') . "\tstate\n";
            echo str_repeat("-", $maxGroupNameLength) . "\t" . str_repeat("-", 15) . "\t-----\n";
            foreach ($hosts as $group => $groupHosts) {
                foreach ($groupHosts as $hostName => $hostStr) {
                    if ($hostName == $argv[2]) {
                        $hostParts = explode(":", $hostStr);
                        echo "\033[0;37m" . str_pad($group, $maxGroupNameLength, ' ') . "\t" . str_pad($hostParts[0], 15, ' ');
                        echo "\t[\033[0;" . (($hostParts[1] == "on")? "32":"31") . "m" . strtoupper($hostParts[1]) . "\033[0;37m]\n";
                    }
                }
            }

            echo "\n";
        }

        exit(0);
    }

    if ($argv[1] == "-add" || $argv[1] == "-replace") {

        if($argc < 4) {
            echo "ERROR: insufficient parameters\n";
            echo "Usage: hswitch -add hostname ip [groupname]\n";
            exit(-1);
        }

        $newHostName = trim($argv[2]);
        $newHostIp = trim($argv[3]);
        $group = isset($argv[4])? trim($argv[4]) : DEFAULT_GROUP_NAME;

        if (isset($hosts[$group][$newHostName]) && $argv[1] == "-add") {
            echo "ERROR: hostname already exists! To replace existent hostname use -replace option\n";
            exit(-1);
        }

        // disable same name hosts
        foreach ($hosts as $groupName => $groupHosts) {
            foreach ($groupHosts as $groupHost => $hostStr) {
                if ($groupHost == $newHostName) {
                    $hosts[$groupName][$groupHost] = setHostState($hosts[$groupName][$groupHost], "off");
                }
            }
        }

        $hosts[$group][$newHostName] = $newHostIp . ":on";

        file_put_contents($HOSTS_FILE, printFile($hosts));
        exit(0);
    }

    $host = trim($argv[1]);
    $group = trim($argv[2]);
    $state = isset($argv[3])? trim($argv[3]): "on";

    if ($group != "all" && !isset($hosts[$group])) {
        echo "ERROR: unknown group: '" . $group . "'\n";
        exit(-1);
    }

    if ($host != "all" && $group != "all" && !isset($hosts[$group][$host])) {
        echo "ERROR: unknown host: '" . $host . "' in group: '" . $group . "'\n";
        exit(-1);
    }

    if ($group == "all" && $state == "on") {
        echo "ERROR: cannot enable all hosts\n";
        exit(-1);
    }

    if ($group == "all") {
        if ($host == "all") {
            // all all off
            foreach ($hosts as $groupName => $groupHosts) {
                foreach ($groupHosts as $groupHost => $hostStr) {
                    $hosts[$groupName][$groupHost] = setHostState($hosts[$groupName][$groupHost], "off");
                }
            }
        } else {
            // couch all off
            foreach ($hosts as $groupName => $groupHosts) {
                foreach ($groupHosts as $groupHost => $hostStr) {
                    if ($groupHost == $host) {
                        $hosts[$groupName][$groupHost] = setHostState($hosts[$groupName][$groupHost], "off");
                    }
                }
            }
        }
    } else {
        if ($host == "all") {
            // all devel on|off
            if ($state == "on") {
                // disable all hosts with same name
                $disable = array_keys($hosts[$group]);

                foreach ($hosts as $groupName => $groupHosts) {
                    foreach ($groupHosts as $groupHost => $hostStr) {
                        if (in_array($groupHost, $disable)) {
                            $hosts[$groupName][$groupHost] = setHostState($hosts[$groupName][$groupHost], "off");
                        }
                    }
                }
            }

            foreach ($hosts[$group] as $hostName => $hostStr) {
                $hosts[$group][$hostName] = setHostState($hosts[$group][$hostName], $state);
            }

        } else {
            // couch devel on|off
            if ($state == "on") {
                // disable all hosts with same name
                foreach($hosts as $groupName => $groupHosts) {
                    if (isset($hosts[$groupName][$host])) {
                        $hosts[$groupName][$host] = setHostState($hosts[$groupName][$host], "off");
                    }
                }
            }

            $hosts[$group][$host] = setHostState($hosts[$group][$host], $state);
        }
    }

    file_put_contents($HOSTS_FILE, printFile($hosts));

} else {
    echo "Hosts switcher tool\nVersion: 0.1a\nCopyright (C) 2012 by Josef Zamrzla\n\n";
    echo "Usage:\n\thswitch hostname|all groupname|all [on (default)|off]\n";
    echo "\thswitch -l hostname|groupname\n";
    echo "\thswitch -add hostname ip [groupname]\n";
    echo "\thswitch -replace hostname ip [groupname]\n\n";
}